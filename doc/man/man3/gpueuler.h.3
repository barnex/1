.TH "gpueuler.h" 3 "6 Jul 2010" "GPU_simulations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gpueuler.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'tensor.h'\fP
.br
\fC#include 'param.h'\fP
.br
\fC#include 'gputil.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBgpueuler\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBgpueuler\fP * \fBnew_gpueuler\fP (\fBparam\fP *params)"
.br
.ti -1c
.RI "void \fBgpueuler_step\fP (\fBgpueuler\fP *solver, \fBtensor\fP *m, \fBtensor\fP *h, double *totalTime)"
.br
.ti -1c
.RI "void \fBgpu_euler_stage\fP (float *m, float *deltaM, int N)"
.br
.ti -1c
.RI "void \fBgpu_add\fP (float *a, float *b, int N)"
.br
.ti -1c
.RI "void \fBgpu_add_constant\fP (float *a, float cnst, int N)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This file implements a trivial Euler algorithm for solving the LL equation.
.PP
\fBAuthor:\fP
.RS 4
Arne Vansteenkiste 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void gpu_add (float * a, float * b, int N)".PP
\fBFor internal use only.\fP
.RS 4
.RE
.PP

.SS "void gpu_add_constant (float * a, float cnst, int N)".PP
\fBFor internal use only.\fP
.RS 4
.RE
.PP

.SS "void gpu_euler_stage (float * m, float * deltaM, int N)".PP
\fBFor internal use only.\fP
.RS 4
.RE
.PP

.SS "void gpueuler_step (\fBgpueuler\fP * solver, \fBtensor\fP * m, \fBtensor\fP * h, double * totalTime)"Takes one time step \fBParameters:\fP
.RS 4
\fIsolver\fP the solver to step 
.br
\fIm\fP magnetization 
.br
\fIh\fP effective field corresponding to m 
.br
\fItotalTime\fP pointer to the total time, is updated by the solver (deltaT is added to it) 
.RE
.PP

.SS "\fBgpueuler\fP* new_gpueuler (\fBparam\fP * params)"Makes a new euler solver. 
.SH "Author"
.PP 
Generated automatically by Doxygen for GPU_simulations from the source code.
