.TH "timer.h" 3 "6 Jul 2010" "GPU_simulations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
timer.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br
\fC#include <stdio.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBtimer_start\fP (const char *tag)"
.br
.ti -1c
.RI "void \fBtimer_stop\fP (const char *tag)"
.br
.ti -1c
.RI "double \fBtimer_get\fP (const char *tag)"
.br
.ti -1c
.RI "void \fBtimer_print\fP (const char *tag)"
.br
.ti -1c
.RI "void \fBtimer_printall\fP (void)"
.br
.ti -1c
.RI "void \fBtimer_printdetail\fP (void)"
.br
.ti -1c
.RI "double \fBtimer_elapsedtime\fP (void)"
.br
.ti -1c
.RI "double \fBtimer_accumulatedtime\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 
A timer for benchmarking and profiling.
.PP
A timer is started/stopped with a tag to identify what is being timed, e.g.: 
.PP
.nf
 timer_start('fft'); 
 do_fft(); 
 timer_stop('fft');

.fi
.PP
.PP
At the end of program, call 
.PP
.nf
 timer_printdetail();

.fi
.PP
 To get a detailed overview of how much time is spent in each of the timed sections.
.PP
The time of an individual section can then be obtained with, e.g.: 
.PP
.nf
 timer_get('fft') 

.fi
.PP
 or printed to the screen with 
.PP
.nf
 timer_print('fft') 

.fi
.PP
.
.PP
A timer can be started and stopped multiple times, which will accumulate the total time.
.PP
\fBNote:\fP
.RS 4
The CPU time is measured, not the walltime. This means that the time spent waiting for other processes or I/O does not count.
.RE
.PP
\fBAuthor:\fP
.RS 4
Arne Vansteenkiste
.RE
.PP
\fBNote:\fP
.RS 4
'We should forget about small efficiencies, say about 97% of the time: 
 premature optimization is the root of all evil' -- Donald Knuth 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "double timer_accumulatedtime (void)"The sum of registered times by all tags. If all went well, this should be approximately equal to timer_totaltime(). If it is significantly smaller, important portions of the code have probably not been timed, if it is significantly larger, portions may have been double-timed. 
.SS "double timer_elapsedtime (void)"The time elapsed between the first \fBtimer_start()\fP and the last \fBtimer_stop()\fP call. If all went well, this should be approximately equal to \fBtimer_accumulatedtime()\fP. 
.SS "double timer_get (const char * tag)"Returns the time in seconds. \fBtimer_stop()\fP should be called first. \fBParameters:\fP
.RS 4
\fItag\fP identifies what is being timed 
.RE
.PP

.SS "void timer_print (const char * tag)"Prints the time to stderr with format: 'tag: xxx s' \fBParameters:\fP
.RS 4
\fItag\fP identifies what is being timed 
.RE
.PP

.SS "void timer_printall (void)"Prints all the timers that are registered 
.SS "void timer_printdetail (void)"Like \fBtimer_printall()\fP, but also prints percentages of the total time. 
.SS "void timer_start (const char * tag)"Starts the timer for the tag \fBParameters:\fP
.RS 4
\fItag\fP identifies what is being timed 
.RE
.PP

.SS "void timer_stop (const char * tag)"Stops the timer for the tag \fBParameters:\fP
.RS 4
\fItag\fP identifies what is being timed 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for GPU_simulations from the source code.
