.TH "timestep.h" 3 "6 Jul 2010" "GPU_simulations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
timestep.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'field.h'\fP
.br
\fC#include 'gpunormalize.h'\fP
.br
\fC#include 'gpueuler.h'\fP
.br
\fC#include 'gpuheun.h'\fP
.br
\fC#include 'gpu_anal.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBtimestepper\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBtimestep\fP (\fBtimestepper\fP *ts, \fBtensor\fP *m, double *totalTime)"
.br
.ti -1c
.RI "void \fBevaluate_heun_step\fP (\fBtimestepper\fP *ts, \fBtensor\fP *m, double *totalTime)"
.br
.ti -1c
.RI "void \fBevaluate_euler_step\fP (\fBtimestepper\fP *ts, \fBtensor\fP *m, double *totalTime)"
.br
.ti -1c
.RI "void \fBevaluate_anal_fw_step\fP (\fBtimestepper\fP *ts, \fBtensor\fP *m, double *totalTime)"
.br
.ti -1c
.RI "void \fBevaluate_anal_pc_step\fP (\fBtimestepper\fP *ts, \fBtensor\fP *m, double *totalTime)"
.br
.ti -1c
.RI "\fBtimestepper\fP * \fBnew_timestepper\fP (\fBparam\fP *params, \fBfieldplan\fP *field)"
.br
.in -1c
.SH "Detailed Description"
.PP 
A timestepper provides a easy-to-use way to make time steps.
.PP
First, a timestepper is constructed with \fBnew_timestepper(param*, fieldplan*)\fP; then, \fBtimestep(timestepper*, tensor *m, double *totalTime)\fP; advances the state of m a bit in time, and updates the value of totalTime.
.PP
The timestepper can internally use any kind of solver, determined by param->solverType. It acts thus like an abstract class, providing a transparent way to acces any solver without having to know which one.
.PP
\fBAuthor:\fP
.RS 4
Ben Van de Wiele, Arne Vansteenkiste 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void evaluate_anal_fw_step (\fBtimestepper\fP * ts, \fBtensor\fP * m, double * totalTime)"
.SS "void evaluate_anal_pc_step (\fBtimestepper\fP * ts, \fBtensor\fP * m, double * totalTime)"
.SS "void evaluate_euler_step (\fBtimestepper\fP * ts, \fBtensor\fP * m, double * totalTime)"
.SS "void evaluate_heun_step (\fBtimestepper\fP * ts, \fBtensor\fP * m, double * totalTime)"
.SS "\fBtimestepper\fP* new_timestepper (\fBparam\fP * params, \fBfieldplan\fP * field)"Creates a new timestepper \fBParameters:\fP
.RS 4
\fIparams\fP The type of solver and its parameters are taken from here 
.br
\fIfield\fP Plan used to update the effective field 
.RE
.PP

.SS "void timestep (\fBtimestepper\fP * ts, \fBtensor\fP * m, double * totalTime)"Takes one full time step \fBParameters:\fP
.RS 4
\fIts\fP timestepper to used 
.br
\fIm\fP magnetization to advance in time 
.br
\fItotalTime\fP starts with the time at the beginning of the step, is updated to totalTime + deltaT by the stepper 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for GPU_simulations from the source code.
